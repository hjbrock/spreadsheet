// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 10.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace SpreadsheetGUITester
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// BasicAddContent - Use 'BasicAddContentParams' to pass parameters into this method.
        /// </summary>
        public void BasicAddContent()
        {
            #region Variable Declarations
            WinWindow uITxtCellContentWindow = this.UINewSpreadsheetWindow.UIEditPanelWindow.UITxtCellContentWindow;
            WinEdit uITxtCellContentEdit = this.UINewSpreadsheetWindow.UITxtCellContentWindow.UITxtCellContentEdit;
            WinClient uISpreadsheetPanelClient = this.UINewSpreadsheetWindow.UIItemWindow.UISpreadsheetPanelClient;
            #endregion

            // Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
            ApplicationUnderTest uINewSpreadsheetWindow = ApplicationUnderTest.Launch(this.BasicAddContentParams.UINewSpreadsheetWindowExePath, this.BasicAddContentParams.UINewSpreadsheetWindowAlternateExePath);

            // Click 'TxtCellContent' window
            Mouse.Click(uITxtCellContentWindow, new Point(18, 0));

            // Type 'fgsdfg' in 'TxtCellContent' text box
            uITxtCellContentEdit.Text = this.BasicAddContentParams.UITxtCellContentEditText;

            // Type '{Enter}' in 'TxtCellContent' text box
            Keyboard.SendKeys(uITxtCellContentEdit, this.BasicAddContentParams.UITxtCellContentEditSendKeys, ModifierKeys.None);

            // Click 'spreadsheetPanel' client
            Mouse.Click(uISpreadsheetPanelClient, new Point(84, 42));
        }
        
        /// <summary>
        /// BasicAddAssertions - Use 'BasicAddAssertionsExpectedValues' to pass parameters into this method.
        /// </summary>
        public void BasicAddAssertions()
        {
            #region Variable Declarations
            WinEdit uITxtCellContentEdit = this.UINewSpreadsheetWindow.UITxtCellContentWindow.UITxtCellContentEdit;
            WinEdit uITxtCellValueEdit = this.UINewSpreadsheetWindow.UITxtCellValueWindow.UITxtCellValueEdit;
            WinEdit uITxtCellNameEdit = this.UINewSpreadsheetWindow.UIA1Window.UITxtCellNameEdit;
            WinTitleBar uINewSpreadsheetTitleBar = this.UINewSpreadsheetWindow.UINewSpreadsheetTitleBar;
            #endregion

            // Verify that 'TxtCellContent' text box's property 'Text' equals 'fgsdfg'
            Assert.AreEqual(this.BasicAddAssertionsExpectedValues.UITxtCellContentEditText, uITxtCellContentEdit.Text);

            // Verify that 'TxtCellValue' text box's property 'Text' equals 'fgsdfg'
            Assert.AreEqual(this.BasicAddAssertionsExpectedValues.UITxtCellValueEditText, uITxtCellValueEdit.Text);

            // Verify that 'TxtCellName' text box's property 'Text' equals 'A1'
            Assert.AreEqual(this.BasicAddAssertionsExpectedValues.UITxtCellNameEditText, uITxtCellNameEdit.Text);

            // Verify that 'New Spreadsheet*' title bar's property 'DisplayText' equals 'New Spreadsheet*'
            Assert.AreEqual(this.BasicAddAssertionsExpectedValues.UINewSpreadsheetTitleBarDisplayText, uINewSpreadsheetTitleBar.DisplayText);
        }
        
        /// <summary>
        /// SaveTest - Use 'SaveTestParams' to pass parameters into this method.
        /// </summary>
        public void SaveTest()
        {
            #region Variable Declarations
            WinMenuItem uISaveMenuItem = this.UINewSpreadsheetWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveMenuItem;
            WinComboBox uIFilenameComboBox = this.UISaveAsWindow.UIDetailsPanePane.UIFilenameComboBox;
            WinEdit uIFilenameEdit = this.UISaveAsWindow.UIItemWindow.UIFilenameEdit;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Save' menu item
            Mouse.Click(uISaveMenuItem, new Point(30, 8));

            // Select 'test.ss' in 'File name:' combo box
            uIFilenameComboBox.EditableItem = this.SaveTestParams.UIFilenameComboBoxEditableItem;

            // Type '{Enter}' in 'File name:' text box
            Keyboard.SendKeys(uIFilenameEdit, this.SaveTestParams.UIFilenameEditSendKeys, ModifierKeys.None);

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(39, 16));
        }
        
        /// <summary>
        /// SaveAssertion - Use 'SaveAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveAssertion()
        {
            #region Variable Declarations
            WinTitleBar uINewSpreadsheetTitleBar = this.UINewSpreadsheetWindow.UINewSpreadsheetTitleBar;
            #endregion

            // Verify that 'New Spreadsheet*' title bar's property 'DisplayText' ends with 'test.ss'
            StringAssert.EndsWith(uINewSpreadsheetTitleBar.DisplayText, this.SaveAssertionExpectedValues.UINewSpreadsheetTitleBarDisplayText);
        }
        
        /// <summary>
        /// SaveAs
        /// </summary>
        public void SaveAs()
        {
            #region Variable Declarations
            WinMenuItem uISaveasMenuItem = this.UICUsersHannahDesktoptWindow.UIMenuStripMenuBar.UIFileMenuItem.UISaveasMenuItem;
            WinEdit uISizeEdit = this.UISaveAsWindow.UIItemWindow1.UITest2ssListItem.UISizeEdit;
            WinButton uISaveButton = this.UISaveAsWindow.UISaveWindow.UISaveButton;
            WinButton uIYesButton = this.UIConfirmSaveAsWindow.UIConfirmSaveAsPane.UIYesButton;
            #endregion

            // Click 'File' -> 'Save as...' menu item
            Mouse.Click(uISaveasMenuItem, new Point(47, 7));

            // Click 'Size' text box
            Mouse.Click(uISizeEdit, new Point(7, 2));

            // Click '&Save' button
            Mouse.Click(uISaveButton, new Point(13, 13));

            // Click '&Yes' button
            Mouse.Click(uIYesButton, new Point(19, 8));
        }
        
        /// <summary>
        /// SaveAsAssertion - Use 'SaveAsAssertionExpectedValues' to pass parameters into this method.
        /// </summary>
        public void SaveAsAssertion()
        {
            #region Variable Declarations
            WinTitleBar uINewSpreadsheetTitleBar = this.UINewSpreadsheetWindow.UINewSpreadsheetTitleBar;
            #endregion

            // Verify that 'New Spreadsheet*' title bar's property 'DisplayText' ends with 'test.ss'
            StringAssert.EndsWith(uINewSpreadsheetTitleBar.DisplayText, this.SaveAsAssertionExpectedValues.UINewSpreadsheetTitleBarDisplayText);
        }
        
        #region Properties
        public virtual BasicAddContentParams BasicAddContentParams
        {
            get
            {
                if ((this.mBasicAddContentParams == null))
                {
                    this.mBasicAddContentParams = new BasicAddContentParams();
                }
                return this.mBasicAddContentParams;
            }
        }
        
        public virtual BasicAddAssertionsExpectedValues BasicAddAssertionsExpectedValues
        {
            get
            {
                if ((this.mBasicAddAssertionsExpectedValues == null))
                {
                    this.mBasicAddAssertionsExpectedValues = new BasicAddAssertionsExpectedValues();
                }
                return this.mBasicAddAssertionsExpectedValues;
            }
        }
        
        public virtual SaveTestParams SaveTestParams
        {
            get
            {
                if ((this.mSaveTestParams == null))
                {
                    this.mSaveTestParams = new SaveTestParams();
                }
                return this.mSaveTestParams;
            }
        }
        
        public virtual SaveAssertionExpectedValues SaveAssertionExpectedValues
        {
            get
            {
                if ((this.mSaveAssertionExpectedValues == null))
                {
                    this.mSaveAssertionExpectedValues = new SaveAssertionExpectedValues();
                }
                return this.mSaveAssertionExpectedValues;
            }
        }
        
        public virtual SaveAsAssertionExpectedValues SaveAsAssertionExpectedValues
        {
            get
            {
                if ((this.mSaveAsAssertionExpectedValues == null))
                {
                    this.mSaveAsAssertionExpectedValues = new SaveAsAssertionExpectedValues();
                }
                return this.mSaveAsAssertionExpectedValues;
            }
        }
        
        public UINewSpreadsheetWindow UINewSpreadsheetWindow
        {
            get
            {
                if ((this.mUINewSpreadsheetWindow == null))
                {
                    this.mUINewSpreadsheetWindow = new UINewSpreadsheetWindow();
                }
                return this.mUINewSpreadsheetWindow;
            }
        }
        
        public UISaveAsWindow UISaveAsWindow
        {
            get
            {
                if ((this.mUISaveAsWindow == null))
                {
                    this.mUISaveAsWindow = new UISaveAsWindow();
                }
                return this.mUISaveAsWindow;
            }
        }
        
        public UIConfirmSaveAsWindow UIConfirmSaveAsWindow
        {
            get
            {
                if ((this.mUIConfirmSaveAsWindow == null))
                {
                    this.mUIConfirmSaveAsWindow = new UIConfirmSaveAsWindow();
                }
                return this.mUIConfirmSaveAsWindow;
            }
        }
        
        public UICUsersHannahDesktoptWindow UICUsersHannahDesktoptWindow
        {
            get
            {
                if ((this.mUICUsersHannahDesktoptWindow == null))
                {
                    this.mUICUsersHannahDesktoptWindow = new UICUsersHannahDesktoptWindow();
                }
                return this.mUICUsersHannahDesktoptWindow;
            }
        }
        #endregion
        
        #region Fields
        private BasicAddContentParams mBasicAddContentParams;
        
        private BasicAddAssertionsExpectedValues mBasicAddAssertionsExpectedValues;
        
        private SaveTestParams mSaveTestParams;
        
        private SaveAssertionExpectedValues mSaveAssertionExpectedValues;
        
        private SaveAsAssertionExpectedValues mSaveAsAssertionExpectedValues;
        
        private UINewSpreadsheetWindow mUINewSpreadsheetWindow;
        
        private UISaveAsWindow mUISaveAsWindow;
        
        private UIConfirmSaveAsWindow mUIConfirmSaveAsWindow;
        
        private UICUsersHannahDesktoptWindow mUICUsersHannahDesktoptWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicAddContent'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class BasicAddContentParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowExePath = "C:\\Users\\Hannah\\Documents\\Visual Studio 2010\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debu" +
            "g\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Launch '%VisualStudioDir%\Projects\PS6\SpreadsheetGUI\bin\Debug\SpreadsheetGUI.exe'
        /// </summary>
        public string UINewSpreadsheetWindowAlternateExePath = "%VisualStudioDir%\\Projects\\PS6\\SpreadsheetGUI\\bin\\Debug\\SpreadsheetGUI.exe";
        
        /// <summary>
        /// Type 'fgsdfg' in 'TxtCellContent' text box
        /// </summary>
        public string UITxtCellContentEditText = "fgsdfg";
        
        /// <summary>
        /// Type '{Enter}' in 'TxtCellContent' text box
        /// </summary>
        public string UITxtCellContentEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'BasicAddAssertions'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class BasicAddAssertionsExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'TxtCellContent' text box's property 'Text' equals 'fgsdfg'
        /// </summary>
        public string UITxtCellContentEditText = "fgsdfg";
        
        /// <summary>
        /// Verify that 'TxtCellValue' text box's property 'Text' equals 'fgsdfg'
        /// </summary>
        public string UITxtCellValueEditText = "fgsdfg";
        
        /// <summary>
        /// Verify that 'TxtCellName' text box's property 'Text' equals 'A1'
        /// </summary>
        public string UITxtCellNameEditText = "A1";
        
        /// <summary>
        /// Verify that 'New Spreadsheet*' title bar's property 'DisplayText' equals 'New Spreadsheet*'
        /// </summary>
        public string UINewSpreadsheetTitleBarDisplayText = "New Spreadsheet*";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveTest'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveTestParams
    {
        
        #region Fields
        /// <summary>
        /// Select 'test.ss' in 'File name:' combo box
        /// </summary>
        public string UIFilenameComboBoxEditableItem = "test.ss";
        
        /// <summary>
        /// Type '{Enter}' in 'File name:' text box
        /// </summary>
        public string UIFilenameEditSendKeys = "{Enter}";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'New Spreadsheet*' title bar's property 'DisplayText' ends with 'test.ss'
        /// </summary>
        public string UINewSpreadsheetTitleBarDisplayText = "test.ss";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'SaveAsAssertion'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class SaveAsAssertionExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that 'New Spreadsheet*' title bar's property 'DisplayText' ends with 'test2.ss'
        /// </summary>
        public string UINewSpreadsheetTitleBarDisplayText = "test.ss";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UINewSpreadsheetWindow : WinWindow
    {
        
        public UINewSpreadsheetWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "New Spreadsheet";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("New Spreadsheet");
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIEditPanelWindow UIEditPanelWindow
        {
            get
            {
                if ((this.mUIEditPanelWindow == null))
                {
                    this.mUIEditPanelWindow = new UIEditPanelWindow(this);
                }
                return this.mUIEditPanelWindow;
            }
        }
        
        public UITxtCellContentWindow UITxtCellContentWindow
        {
            get
            {
                if ((this.mUITxtCellContentWindow == null))
                {
                    this.mUITxtCellContentWindow = new UITxtCellContentWindow(this);
                }
                return this.mUITxtCellContentWindow;
            }
        }
        
        public UIItemWindow UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UITxtCellValueWindow UITxtCellValueWindow
        {
            get
            {
                if ((this.mUITxtCellValueWindow == null))
                {
                    this.mUITxtCellValueWindow = new UITxtCellValueWindow(this);
                }
                return this.mUITxtCellValueWindow;
            }
        }
        
        public UIA1Window UIA1Window
        {
            get
            {
                if ((this.mUIA1Window == null))
                {
                    this.mUIA1Window = new UIA1Window(this);
                }
                return this.mUIA1Window;
            }
        }
        
        public WinTitleBar UINewSpreadsheetTitleBar
        {
            get
            {
                if ((this.mUINewSpreadsheetTitleBar == null))
                {
                    this.mUINewSpreadsheetTitleBar = new WinTitleBar(this);
                    #region Search Criteria
                    this.mUINewSpreadsheetTitleBar.WindowTitles.Add("New Spreadsheet*");
                    #endregion
                }
                return this.mUINewSpreadsheetTitleBar;
            }
        }
        
        public UIMenuStripMenuBar UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIEditPanelWindow mUIEditPanelWindow;
        
        private UITxtCellContentWindow mUITxtCellContentWindow;
        
        private UIItemWindow mUIItemWindow;
        
        private UITxtCellValueWindow mUITxtCellValueWindow;
        
        private UIA1Window mUIA1Window;
        
        private WinTitleBar mUINewSpreadsheetTitleBar;
        
        private UIMenuStripMenuBar mUIMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIEditPanelWindow : WinWindow
    {
        
        public UIEditPanelWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "editPanel";
            this.WindowTitles.Add("New Spreadsheet");
            #endregion
        }
        
        #region Properties
        public WinWindow UITxtCellContentWindow
        {
            get
            {
                if ((this.mUITxtCellContentWindow == null))
                {
                    this.mUITxtCellContentWindow = new WinWindow(this);
                    #region Search Criteria
                    this.mUITxtCellContentWindow.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Content:";
                    this.mUITxtCellContentWindow.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.EDIT", PropertyExpressionOperator.Contains));
                    this.mUITxtCellContentWindow.WindowTitles.Add("New Spreadsheet");
                    #endregion
                }
                return this.mUITxtCellContentWindow;
            }
        }
        #endregion
        
        #region Fields
        private WinWindow mUITxtCellContentWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtCellContentWindow : WinWindow
    {
        
        public UITxtCellContentWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TxtCellContent";
            this.WindowTitles.Add("New Spreadsheet");
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtCellContentEdit
        {
            get
            {
                if ((this.mUITxtCellContentEdit == null))
                {
                    this.mUITxtCellContentEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtCellContentEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Content:";
                    this.mUITxtCellContentEdit.WindowTitles.Add("New Spreadsheet");
                    this.mUITxtCellContentEdit.WindowTitles.Add("New Spreadsheet*");
                    #endregion
                }
                return this.mUITxtCellContentEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtCellContentEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow : WinWindow
    {
        
        public UIItemWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.SearchProperties[WinWindow.PropertyNames.Instance] = "3";
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinClient UISpreadsheetPanelClient
        {
            get
            {
                if ((this.mUISpreadsheetPanelClient == null))
                {
                    this.mUISpreadsheetPanelClient = new WinClient(this);
                    #region Search Criteria
                    this.mUISpreadsheetPanelClient.WindowTitles.Add("New Spreadsheet*");
                    #endregion
                }
                return this.mUISpreadsheetPanelClient;
            }
        }
        #endregion
        
        #region Fields
        private WinClient mUISpreadsheetPanelClient;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITxtCellValueWindow : WinWindow
    {
        
        public UITxtCellValueWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TxtCellValue";
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtCellValueEdit
        {
            get
            {
                if ((this.mUITxtCellValueEdit == null))
                {
                    this.mUITxtCellValueEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtCellValueEdit.WindowTitles.Add("New Spreadsheet*");
                    #endregion
                }
                return this.mUITxtCellValueEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtCellValueEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIA1Window : WinWindow
    {
        
        public UIA1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "TxtCellName";
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtCellNameEdit
        {
            get
            {
                if ((this.mUITxtCellNameEdit == null))
                {
                    this.mUITxtCellNameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtCellNameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Cell:";
                    this.mUITxtCellNameEdit.WindowTitles.Add("New Spreadsheet*");
                    #endregion
                }
                return this.mUITxtCellNameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtCellNameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStripMenuBar : WinMenuBar
    {
        
        public UIMenuStripMenuBar(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip";
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem : WinMenuItem
    {
        
        public UIFileMenuItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("New Spreadsheet*");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveMenuItem
        {
            get
            {
                if ((this.mUISaveMenuItem == null))
                {
                    this.mUISaveMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save";
                    this.mUISaveMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveMenuItem.WindowTitles.Add("New Spreadsheet*");
                    #endregion
                }
                return this.mUISaveMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveAsWindow : WinWindow
    {
        
        public UISaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UIDetailsPanePane UIDetailsPanePane
        {
            get
            {
                if ((this.mUIDetailsPanePane == null))
                {
                    this.mUIDetailsPanePane = new UIDetailsPanePane(this);
                }
                return this.mUIDetailsPanePane;
            }
        }
        
        public UIItemWindow1 UIItemWindow
        {
            get
            {
                if ((this.mUIItemWindow == null))
                {
                    this.mUIItemWindow = new UIItemWindow1(this);
                }
                return this.mUIItemWindow;
            }
        }
        
        public UIItemWindow11 UIItemWindow1
        {
            get
            {
                if ((this.mUIItemWindow1 == null))
                {
                    this.mUIItemWindow1 = new UIItemWindow11(this);
                }
                return this.mUIItemWindow1;
            }
        }
        
        public UISaveWindow UISaveWindow
        {
            get
            {
                if ((this.mUISaveWindow == null))
                {
                    this.mUISaveWindow = new UISaveWindow(this);
                }
                return this.mUISaveWindow;
            }
        }
        #endregion
        
        #region Fields
        private UIDetailsPanePane mUIDetailsPanePane;
        
        private UIItemWindow1 mUIItemWindow;
        
        private UIItemWindow11 mUIItemWindow1;
        
        private UISaveWindow mUISaveWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIDetailsPanePane : WinPane
    {
        
        public UIDetailsPanePane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Details Pane";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinComboBox UIFilenameComboBox
        {
            get
            {
                if ((this.mUIFilenameComboBox == null))
                {
                    this.mUIFilenameComboBox = new WinComboBox(this);
                    #region Search Criteria
                    this.mUIFilenameComboBox.SearchProperties[WinComboBox.PropertyNames.Name] = "File name:";
                    this.mUIFilenameComboBox.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameComboBox;
            }
        }
        #endregion
        
        #region Fields
        private WinComboBox mUIFilenameComboBox;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow1 : WinWindow
    {
        
        public UIItemWindow1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1001";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UIFilenameEdit
        {
            get
            {
                if ((this.mUIFilenameEdit == null))
                {
                    this.mUIFilenameEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUIFilenameEdit.SearchProperties[WinEdit.PropertyNames.Name] = "File name:";
                    this.mUIFilenameEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUIFilenameEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUIFilenameEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIItemWindow11 : WinWindow
    {
        
        public UIItemWindow11(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.AccessibleName] = "Items View";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "DirectUIHWND";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public UITest2ssListItem UITest2ssListItem
        {
            get
            {
                if ((this.mUITest2ssListItem == null))
                {
                    this.mUITest2ssListItem = new UITest2ssListItem(this);
                }
                return this.mUITest2ssListItem;
            }
        }
        #endregion
        
        #region Fields
        private UITest2ssListItem mUITest2ssListItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UITest2ssListItem : WinListItem
    {
        
        public UITest2ssListItem(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinListItem.PropertyNames.Name] = "test2.ss";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinEdit UISizeEdit
        {
            get
            {
                if ((this.mUISizeEdit == null))
                {
                    this.mUISizeEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUISizeEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Size";
                    this.mUISizeEdit.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISizeEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUISizeEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UISaveWindow : WinWindow
    {
        
        public UISaveWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlId] = "1";
            this.WindowTitles.Add("Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UISaveButton
        {
            get
            {
                if ((this.mUISaveButton == null))
                {
                    this.mUISaveButton = new WinButton(this);
                    #region Search Criteria
                    this.mUISaveButton.SearchProperties[WinButton.PropertyNames.Name] = "Save";
                    this.mUISaveButton.WindowTitles.Add("Save As");
                    #endregion
                }
                return this.mUISaveButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUISaveButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsWindow : WinWindow
    {
        
        public UIConfirmSaveAsWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "Confirm Save As";
            this.SearchProperties[WinWindow.PropertyNames.ClassName] = "#32770";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public UIConfirmSaveAsPane UIConfirmSaveAsPane
        {
            get
            {
                if ((this.mUIConfirmSaveAsPane == null))
                {
                    this.mUIConfirmSaveAsPane = new UIConfirmSaveAsPane(this);
                }
                return this.mUIConfirmSaveAsPane;
            }
        }
        #endregion
        
        #region Fields
        private UIConfirmSaveAsPane mUIConfirmSaveAsPane;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIConfirmSaveAsPane : WinPane
    {
        
        public UIConfirmSaveAsPane(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinControl.PropertyNames.Name] = "Confirm Save As";
            this.WindowTitles.Add("Confirm Save As");
            #endregion
        }
        
        #region Properties
        public WinButton UIYesButton
        {
            get
            {
                if ((this.mUIYesButton == null))
                {
                    this.mUIYesButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIYesButton.SearchProperties[WinButton.PropertyNames.Name] = "Yes";
                    this.mUIYesButton.WindowTitles.Add("Confirm Save As");
                    #endregion
                }
                return this.mUIYesButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIYesButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UICUsersHannahDesktoptWindow : WinWindow
    {
        
        public UICUsersHannahDesktoptWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "C:\\Users\\Hannah\\Desktop\\test2.ss";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("C:\\Users\\Hannah\\Desktop\\test2.ss");
            #endregion
        }
        
        #region Properties
        public UIMenuStripMenuBar1 UIMenuStripMenuBar
        {
            get
            {
                if ((this.mUIMenuStripMenuBar == null))
                {
                    this.mUIMenuStripMenuBar = new UIMenuStripMenuBar1(this);
                }
                return this.mUIMenuStripMenuBar;
            }
        }
        #endregion
        
        #region Fields
        private UIMenuStripMenuBar1 mUIMenuStripMenuBar;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIMenuStripMenuBar1 : WinMenuBar
    {
        
        public UIMenuStripMenuBar1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenu.PropertyNames.Name] = "menuStrip";
            this.WindowTitles.Add("C:\\Users\\Hannah\\Desktop\\test2.ss");
            #endregion
        }
        
        #region Properties
        public UIFileMenuItem1 UIFileMenuItem
        {
            get
            {
                if ((this.mUIFileMenuItem == null))
                {
                    this.mUIFileMenuItem = new UIFileMenuItem1(this);
                }
                return this.mUIFileMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private UIFileMenuItem1 mUIFileMenuItem;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "10.0.30319.1")]
    public class UIFileMenuItem1 : WinMenuItem
    {
        
        public UIFileMenuItem1(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinMenuItem.PropertyNames.Name] = "File";
            this.WindowTitles.Add("C:\\Users\\Hannah\\Desktop\\test2.ss");
            #endregion
        }
        
        #region Properties
        public WinMenuItem UISaveasMenuItem
        {
            get
            {
                if ((this.mUISaveasMenuItem == null))
                {
                    this.mUISaveasMenuItem = new WinMenuItem(this);
                    #region Search Criteria
                    this.mUISaveasMenuItem.SearchProperties[WinMenuItem.PropertyNames.Name] = "Save as...";
                    this.mUISaveasMenuItem.SearchConfigurations.Add(SearchConfiguration.ExpandWhileSearching);
                    this.mUISaveasMenuItem.WindowTitles.Add("C:\\Users\\Hannah\\Desktop\\test2.ss");
                    #endregion
                }
                return this.mUISaveasMenuItem;
            }
        }
        #endregion
        
        #region Fields
        private WinMenuItem mUISaveasMenuItem;
        #endregion
    }
}
